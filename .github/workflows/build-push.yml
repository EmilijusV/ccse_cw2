name: Build, Scan and Upload Docker Image

on:
  push:
    tags:
      - '*'

env:
  REGION: europe-west2
  PROJECT: sonorous-wharf-424609-c1
  REPO: main
  IMAGE: demo-1
  GCP_CLOUD_RUN_SERVICE: demo-1

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set vars
        run: echo "IMAGE_TAG=$REGION-docker.pkg.dev/$PROJECT/$REPO/$IMAGE" >> $GITHUB_ENV

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GC_IMAGE_MANAGER_KEY }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Docker auth
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_TAG }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Inspect Docker Image
        run: |
          echo "Image tag: ${{ env.IMAGE_TAG }}:${{ github.ref_name }}"
          docker pull "${{ env.IMAGE_TAG }}:${{ github.ref_name }}"
          docker inspect "${{ env.IMAGE_TAG }}:${{ github.ref_name }}"
  
      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT }}/${{ env.REPO }}/${{ env.IMAGE }}:${{ github.ref_name }}
          args: --exit-code=0 --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub code scanning
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: snyk.sarif
          category: snyk-sast-analysis

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - name: Google Cloud Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GC_IMAGE_MANAGER_KEY }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Enable Cloud Run API
        run: gcloud services enable run.googleapis.com

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy demo-1 \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT }}/${{ env.REPO }}/${{ env.IMAGE }}:${{ github.ref_name }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --project ${{ env.PROJECT }} \
            --allow-unauthenticated \
            --format "value(status.url)"

      - name: Get Cloud Run URL
        id: get-url
        run: |
          CLOUD_RUN_URL=$(gcloud run services describe demo-1 --region ${{ env.REGION }} --format 'value(status.url)')
          echo "CLOUD_RUN_URL=$CLOUD_RUN_URL" >> $GITHUB_ENV
          echo "CLOUD_RUN_URL=$CLOUD_RUN_URL" >> $GITHUB_OUTPUT

      - name: Print Cloud Run URL
        run: |
          echo "Cloud Run URL: ${{ env.CLOUD_RUN_URL }}"

  dast-scan:
    needs: deploy
    runs-on: ubuntu-latest
    env:
      CLOUD_RUN_URL: ${{ needs.deploy.outputs.get-url.outputs.CLOUD_RUN_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GC_IMAGE_MANAGER_KEY }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Print Cloud Run URL
        run: |
          echo "Cloud Run URL: ${{ env.CLOUD_RUN_URL }}"

      - name: Get Cloud Run Service URL
        id: get-url
        run: |
          URL=$(gcloud run services describe ${{ env.GCP_CLOUD_RUN_SERVICE }} --region=${{ env.REGION }} --format 'value(status.url)')
          echo "::set-output name=url::$URL"

      - name: Docker auth
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Set up OWASP ZAP
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: ${{ env.CLOUD_RUN_URL }}
